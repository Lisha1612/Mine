#program1
import cv2
import numpy
import imageio as iio
from matplotlib import pyplot as plt
from matplotlib import image as mpimg
img = cv2.imread('C:\\Users\\Lishakka\\Downloads\\rose.jpg')
h, w, channels = img.shape
half = w//2
left_part = img[:, :half]
right_part = img[:, half:]
half2 = h//2
top = img[:half2, :] 
bottom = img[half2:, :] 
plt.title("Image")
plt.xlabel("X pixel scaling") 
plt.ylabel("Y pixels scaling")
cv2.imwrite('top.jpg', top)
plt.imshow(top)
plt.show() 
cv2.imwrite('bottom.jpg', bottom) 
plt.imshow(bottom)
plt.show()
cv2.imwrite('right.jpg', right_part) 
plt.imshow(right_part)
plt.show()
cv2.imwrite('left.jpg', left_part) 
plt.imshow(left_part)
plt.show()
cv2.waitKey(0)
plt.title("Sheep Image") 
plt.xlabel("X pixel scaling")
plt.ylabel("Y pixels scaling")
image = mpimg.imread("/content/IMG-20190808-WA0091-1.jpg") 
plt.imshow(image)
plt.show()



#program2
Program 2: Image Transformation 
import cv2 
import numpy as np 
FILE_NAME = 'volleyball.jpg' 
try:
  img = cv2.imread(FILE_NAME) 
  (height, width) = img.shape[:2] 
  res = cv2.resize(img, (int(width / 2), int(height / 2)), interpolation = cv2.INTER_CUBIC) 
  cv2.imwrite('result.jpg', res) 
except IOError: 
  print ('Error while reading files !!!') 

import cv2 
import numpy as np 
FILE_NAME = 'volleyball.jpg' 
try:
  img = cv2.imread(FILE_NAME) 
  (rows, cols) = img.shape[:2]  
  M = cv2.getRotationMatrix2D((cols / 2, rows / 2), 45, 1) 
  res = cv2.warpAffine(img, M, (cols, rows)) 
  cv2.imwrite('result.jpg', res) 
except IOError: 
  print ('Error while reading files !!!') 

import cv2 
import numpy as np 
FILE_NAME = 'volleyball.jpg' 
M = np.float32([[1, 0, 100], [0, 1, 50]]) 
try:
  img = cv2.imread(FILE_NAME) 
  (rows, cols) = img.shape[:2]  
  res = cv2.warpAffine(img, M, (cols, rows)) 
  cv2.imwrite('result.jpg', res) 
except IOError: 
  print ('Error while reading files !!!') 


Program 3: Erosion and Dilation
# Python program to demonstrate erosion

import cv2
import numpy as np
# Reading the input image
img = cv2.imread('your image here', 0)
kernel = np.ones((5, 5), np.uint8)
img_erosion = cv2.erode(img, kernel, iterations=1)
cv2.imshow('Input', img)
cv2.imshow('Erosion', img_erosion)
subtracted = cv2.subtract(img, img_erosion)

img_dilation = cv2.dilate(img, kernel, iterations=1)
cv2.imshow('Input', img)
cv2.imshow('Erosion', img_erosion)
cv2.imshow('Sub', subtracted)
cv2.imshow('Dilation', img_dilation)
cv2.waitKey(0)
cv2.waitKey(0)
cv2.destroyAllWindows()
cv2.waitKey(0)


prgm-4 edge detection

import cv2
img = cv2.imread(image)
cv2.imshow('Original', img)
cv2.waitKey(0)

img_gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

# Blur the image for better edge detection
img_blur = cv2.GaussianBlur(img_gray, (3,3), 0)
# Sobel Edge Detection
sobelx = cv2.Sobel(src=img_blur, ddepth=cv2.CV_64F, dx=1, dy=0, ksize=5) # Sobel Edge Detection on the X axis
sobely = cv2.Sobel(src=img_blur, ddepth=cv2.CV_64F, dx=0, dy=1, ksize=5) # Sobel Edge Detection on the Y axis
sobelxy = cv2.Sobel(src=img_blur, ddepth=cv2.CV_64F, dx=1, dy=1, ksize=5) # Combined X and Y Sobel Edge Detection
# Display Sobel Edge Detection Images
cv2.imshow('Sobel X', sobelx)
cv2.waitKey(0)
cv2.imshow('Sobel Y', sobely)
cv2.waitKey(0)
cv2.imshow('Sobel X Y using Sobel() function', sobelxy)
cv2.waitKey(0)
# Canny Edge Detection
edges = cv2.Canny(image=img_blur, threshold1=100, threshold2=200) # Canny Edge Detection
# Display Canny Edge Detection Image
cv2.imshow('Canny Edge Detection', edges)
cv2.waitKey(0)
cv2.destroyAllWindows()

pgm-4b

import numpy as np
from skimage.io import imread
from skimage import io
from skimage.color import rgb2gray
import imageio
import skimage
import cv2
image = cv2.imread('your image here')
io.imshow(image)
image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
io.imshow(image)
co_matrix = skimage.feature.graycomatrix(image, [5], [0], levels=256, symmetric=True, normed=True)
contrast = skimage.feature.graycoprops(co_matrix, 'contrast')
correlation = skimage.feature.graycoprops(co_matrix, 'correlation')
energy = skimage.feature.graycoprops(co_matrix, 'energy')
homogeneity = skimage.feature.graycoprops(co_matrix, 'homogeneity')
print("Contrast:", contrast)
print("Correlation:", correlation)
print("Energy:", energy)
print("Homogeneity:", homogeneity)


pgm-5a

import cv2
import matplotlib.pyplot as plt
img = cv2.imread( 'your image here',0)
hist1 = cv2.calcHist([img],[0],None,[256],[0,256])
img_2 = cv2.equalizeHist(img)
hist2 = cv2.calcHist([img_2],[0],None,[256],[0,256])
plt.subplot(221),plt.imshow(img);
plt.subplot(222),plt.plot(hist1);
plt.subplot(223),plt.imshow(img_2);
plt.subplot(224),plt.plot(hist2);

pgm-5b

from skimage import data
from skimage import filters
from skimage.color import rgb2gray
import matplotlib.pyplot as plt
# Sample Image of scikit-image package, need not include your own image!!!
coffee = data.coffee()
gray_coffee = rgb2gray(coffee)
# Setting the plot size to 15,15
plt.figure(figsize=(15, 15))
for i in range(10):

   binarized_gray = (gray_coffee > i*0.1)*1
   plt.subplot(5,2,i+1)

   plt.title("Threshold: >"+str(round(i*0.1,1)))

   plt.imshow(binarized_gray, cmap ='gray')
plt.tight_layout()

